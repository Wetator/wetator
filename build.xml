<?xml version="1.0" encoding="UTF-8"?>
<project name="Wetator build" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- make  environment variables of operation system available -->
    <property environment="env" />

    <!-- path to ant-dir -->
    <property name="ant" value="ant" />

    <!-- application specific properties -->
    <xmlproperty file="./build-properties.xml" keepRoot="false" semanticAttributes="true" />


    <!-- ******************************************* -->
    <!-- target load-onejar                          -->
    <!-- ******************************************* -->
    <target name="load-onejar">
        <property name="one-jar.dist.dir" value="./dist"/>
        <property name="one-jar.version" value="0.97"/>
        <taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask" onerror="report">
            <classpath id="one-jar-classpath">
                <fileset dir="./ant_lib" includes="**/one-jar-ant-task*.jar"/>
            </classpath>
        </taskdef>
    </target>


	<!-- ******************************************* -->
    <!-- target load-wetator                         -->
    <!-- ******************************************* -->
    <target name="load-wetator">
        <taskdef name="wetator" classname="org.wetator.ant.Wetator" >
            <classpath id="wetator-classpath">
                <fileset dir="${dir.lib}" includes="**/**.jar" />
                <fileset dir="${dir.build}" includes="wetator.jar" />
            </classpath>
        </taskdef>
    </target>


	<!-- =================================
          target: load-ivy
         ================================= -->
    <target name="load-ivy">
        <!-- try to load ivy here from home ivy dir, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as ivy home lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the ivy home lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="./ant_lib" includes="ivy*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                  uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <!-- ******************************************* -->
    <!-- target info                                 -->
    <!-- ******************************************* -->
    <target name="info" description="Info Target">
        <echo level="info" message="" />
        <echo level="info" message="Project: ${ant.project.name}" />
        <echo level="info" message="  ${ant.version}" />
        <echo level="info" message="  Java version ${ant.java.version}" />
        <echo level="info" message="" />
    </target>


    <!-- ******************************************* -->
    <!-- target clean-compile                        -->
    <!-- ******************************************* -->
    <target name="clean-compile" description="recompiles all"
        depends="clean, resolve">

        <!-- clean build -->
        <delete dir="${dir.build}" includeEmptyDirs="true"/>
        <mkdir dir="${dir.build}"/>

        <mkdir dir="${dir.build}/classes"/>

        <!-- compile local classes -->
        <echo>Compiling with Java target ${javac.target}</echo>

        <javac srcdir="${dir.src}" encoding="iso-8859-1" debug="on" debuglevel="lines,vars,source"
              target="${javac.target}" destdir="${dir.build}/classes">
            <classpath>
                <fileset dir="${dir.lib}">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>

        <!-- copy resources -->
        <copy todir="${dir.build}/classes" preservelastmodified="yes">
            <fileset dir="${dir.src}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>


    <!-- ******************************************* -->
    <!-- target compile-tests                        -->
    <!-- ******************************************* -->
    <target name="compile-tests">

        <!-- clean build -->
        <mkdir dir="${dir.build}/test-classes"/>

        <!-- compile local classes -->
        <echo>Compiling with Java target ${javac.target}</echo>

        <javac srcdir="${dir.test-src}" encoding="iso-8859-1" debug="on" debuglevel="lines,vars,source"
            target="${javac.target}" destdir="${dir.build}/test-classes">
            <classpath>
                <fileset dir="${dir.lib}">
                    <include name="**/*.jar"/>
                </fileset>
                <path path="${dir.build}/classes" />
            </classpath>
        </javac>

        <!-- copy resources -->
        <copy todir="${dir.build}/test-classes" preservelastmodified="yes">
            <fileset dir="${dir.test-src}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>


    <!-- ******************************************* -->
    <!-- target build-release                        -->
    <!-- ******************************************* -->
    <target name="build-release" description="build all Wetator release artifacts"
        depends="load-onejar">
        <tstamp>
            <format property="timestamp" pattern="yyyy-MM-dd HH-mm-ss" />
        </tstamp>

        <propertyfile file="build.properties">
          <entry key="application.buildnumber" type="int" default="42" operation="+"/>
        </propertyfile>
        <property file="build.properties"/>

        <echo message="Version: ${application.version}"/>
        <echo message="Build:   ${application.buildnumber}"/>

        <antcall target="clean-compile" />

        <delete file="${dir.build}/${application.jar-basename}.jar"/>
        <jar destfile="${dir.build}/${application.jar-basename}.jar">
            <fileset dir="${dir.build}/classes">
                <include name="**/*.*"/>
                <exclude name="wetator.config"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="org.wetator.Wetator"/>
                <section name="Application">
                    <attribute name="Application-Name" value="${application.name}"/>
                    <attribute name="Vendor" value="${application.vendor}"/>
                    <attribute name="Version" value="${application.version}"/>
                    <attribute name="Build" value="${application.buildnumber}"/>
                    <attribute name="Date" value="${timestamp}"/>
                </section>
                <section name="Build">
                    <attribute name="Java-Runtime" value="${java.runtime.name}" />
                    <attribute name="Java-Version" value="${java.runtime.version}" />
                    <attribute name="Java-Target" value="${javac.target}" />
                    <attribute name="OS-Name" value="${os.name}"/>
                    <attribute name="OS-Version" value="${os.version}"/>
                </section>
            </manifest>
        </jar>

        <delete file="${dir.build}/MANIFEST.MF"/>
        <manifest file="${dir.build}/MANIFEST.MF">
            <attribute name="Main-Class" value="com.simontuffs.onejar.Boot"/>
            <attribute name="One-Jar-Main-Class" value="org.wetator.Wetator"/>
        </manifest>

        <!-- Construct the One-JAR file -->
        <delete file="${dir.build}/${application.jar-basename}_all.jar"/>
        <one-jar destfile="${dir.build}/${application.jar-basename}_all.jar" manifest="${dir.build}/MANIFEST.MF">
            <main>
                <fileset dir="${dir.build}/classes">
                    <include name="**/*.*"/>
                </fileset>
            </main>
            <lib>
                <fileset dir="${dir.lib}">
                    <include name="*.jar" />

                    <exclude name="ant-*.jar" />
                    <exclude name="hsqldb-*.jar" />
                    <exclude name="junit-*.jar" />
                    <exclude name="jetty-*.jar" />
                    <exclude name="servlet-*.jar" />
                    <exclude name="slf4j-*.jar" />
                </fileset>
            </lib>
        </one-jar>

        <echo file="${dir.build}/wetator.bat" append="false">@echo off

REM ----------------------------
REM Simple Wetator start script
REM ----------------------------


if "%JAVA_HOME%" == "" goto error

rem add the jdbc drivers if needed
rem SET JAVA_OPTS=%JAVA_OPTS% -Done-jar.class.path=ojdbc14.jar
rem SET JAVA_OPTS=%JAVA_OPTS% -Done-jar.class.path="db2jcc.jar|db2jcc_license_cu.jar"

rem start command for Wetator
set CMD="%JAVA_HOME%\bin\java" %JAVA_OPTS% -jar ${application.jar-basename}_all.jar %*

echo Starting Wetator

ECHO %CMD%
%CMD%


goto end

:error

echo ERROR: JAVA_HOME not found in your environment.
echo Please, set the JAVA_HOME variable in your environment to match the
echo location of the Java Virtual Machine you want to use.

:end
</echo>

        <mkdir dir="${dir.deploy}"/>

        <!-- generate cmd-line distribution zip -->
        <zip destfile="${dir.deploy}/${application.jar-basename}_${application.version}.zip">
            <fileset dir="${dir.build}" >
                <include name="wetator.bat" />
                <include name="${application.jar-basename}_all.jar" />
            </fileset>

            <zipfileset dir="${dir.samples}" prefix="samples">
                <include name="google_search/**" />
                <exclude name="google_search/logs/**" />
            </zipfileset>

            <zipfileset dir="${dir.xsl}" prefix="xsl">
            </zipfileset>

            <zipfileset dir="${dir.src}" prefix="templates">
                <include name="wetator.config" />
            </zipfileset>
        </zip>

        <!-- generate ant distribution zip -->
        <zip destfile="${dir.deploy}/${application.jar-basename}_ant_${application.version}.zip">
            <zipfileset dir="${dir.build}" prefix="lib" >
                <include name="${application.jar-basename}.jar" />
            </zipfileset>

            <zipfileset dir="${dir.lib}" prefix="lib">
                <include name="*.jar" />

                <exclude name="ant-*.jar" />
                <exclude name="hsqldb-*.jar" />
                <exclude name="jetty-*.jar" />
                <exclude name="junit-*.jar" />
                <exclude name="servlet-*.jar" />
                <exclude name="slf4j-*.jar" />
            </zipfileset>

            <zipfileset dir="${dir.samples}/ant" prefix="templates">
                <include name="build.xml" />
            </zipfileset>

            <zipfileset dir="${dir.xsl}" prefix="xsl">
            </zipfileset>

            <zipfileset dir="${dir.src}" prefix="templates">
                <include name="wetator.config" />
            </zipfileset>
        </zip>

        <!-- generate src zip -->
        <zip destfile="${dir.deploy}/${application.jar-basename}-${application.version}-src.jar">
            <fileset dir="." >
                <include name=".classpath" />
                <include name=".project" />
                <include name="build.xml" />
                <include name="build-properties.xml" />
                <include name="ivy.xml" />
                <include name="ivysettings.xml" />
                <include name="LICENSE.txt" />
                <include name="readme.txt" />
            </fileset>

            <zipfileset dir="${dir.ant-lib}" prefix="${dir.ant-lib}">
            </zipfileset>

            <zipfileset dir="${dir.lib}" prefix="${dir.lib}">
                <exclude name="**/**" />
            </zipfileset>

            <zipfileset dir="${dir.samples}" prefix="${dir.samples}">
                <exclude name="**/**" />
            </zipfileset>

            <zipfileset dir="${dir.src}" prefix="${dir.src}">
                <exclude name="**/jdoc/**" />
                <exclude name="**/*.jpage*" />
            </zipfileset>

            <zipfileset dir="${dir.test}" prefix="${dir.test}">
                <exclude name="**/jdoc/**" />
                <exclude name="**/*.jpage*" />
            </zipfileset>

            <zipfileset dir="${dir.xsl}" prefix="${dir.xsl}">
                <include name="**/**.png" />
                <include name="**/**.xsl" />
            </zipfileset>
        </zip>

        <!-- generate web zip -->
        <zip destfile="${dir.deploy}/${application.jar-basename}_web_${application.version}.zip">
            <zipfileset dir="${dir.webpages}" >
            </zipfileset>

            <zipfileset dir="${dir.deploy}" prefix="download">
                <include name="${application.jar-basename}_*${application.version}.zip" />
                <exclude name="${application.jar-basename}_web_${application.version}.zip" />
            </zipfileset>
            <zipfileset dir="${dir.test-wet-src}" prefix="exceltests">
            </zipfileset>
        </zip>

    </target>


    <!-- ******************************************* -->
    <!-- target test-release                         -->
    <!-- ******************************************* -->
    <target name="test-release" description="test the wetator release artefacts" >
    	<echo message="Testing version: ${application.version}"></echo>
        <echo></echo>

        <!-- new dir for the tests -->
        <delete dir="${dir.build}/test-release" />
        <mkdir dir="${dir.build}/test-release" />

        <!-- test the application -->
    	<unzip src="${dir.deploy}/${application.jar-basename}_${application.version}.zip" dest="${dir.build}/test-release/app" />
    	<copy
    		file="${basedir}/${dir.build}/test-release/app/samples/google_search/wetator.config"
    		todir="${basedir}/${dir.build}/test-release/app"
    	/>
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/google_search/google.xls"
            todir="${basedir}/${dir.build}/test-release/app"
        />

    	<exec executable="cmd" dir="${basedir}/${dir.build}/test-release/app">
    	    <arg value="/c"/>
    	    <arg value="${basedir}/${dir.build}/test-release/app/wetator.bat"/>
            <arg value="google.xls"/>
    	</exec>

        <!-- test the ant task -->
        <unzip src="${dir.deploy}/${application.jar-basename}_ant_${application.version}.zip" dest="${dir.build}/test-release/ant" />
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/google_search/wetator.config"
            todir="${basedir}/${dir.build}/test-release/ant"
        />
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/google_search/google.xls"
            todir="${basedir}/${dir.build}/test-release/ant"
        />
    	
    	<echo file="${dir.build}/test-release/ant/build.xml"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Wetator Ant Test" basedir="${basedir}/${dir.build}/test-release/ant" default="run_wetator">
  <path id="wetator-classpath">
    <fileset dir="./lib" includes="**/**.jar"/>
  </path>
  <taskdef name="wetator" classname="org.wetator.ant.Wetator" classpathref="wetator-classpath" />

  <target name="run_wetator">
    <wetator config="wetator.config">
      <fileset dir="." >
        <include name="*.xls"/>
      </fileset>
    </wetator>
  </target>
</project>
]]>
</echo>

        <exec executable="cmd">
            <arg value="/c"/>
            <arg value="%ANT_HOME%\bin\ant.bat"/>
            <arg value="-buildfile"/>
            <arg value="${dir.build}/test-release/ant/build.xml"/>
        </exec>
    </target>

	<!-- ******************************************* -->
    <!-- target upload-jar-to-repo                   -->
    <!-- ******************************************* -->
    <target name="upload-jar-to-repo" description="upload current deploy/wetator.jar to repo"
        depends="load-wetator">

    	<input message="Please enter repo username:" addproperty="repo.user"/>
        <input message="Please enter repo password:" addproperty="repo.password"/>
    	
        <wetator config="wetator-upload.cfg">
            <fileset dir=".">
                <include name="wetator-upload.wet"/>
            </fileset>

            <property name="$user" value="${repo.user}"/>
            <property name="$$$password" value="${repo.password}"/>
        </wetator>
    </target>


    <!-- =================================
          target: resolve
         ================================= -->
    <target name="resolve" depends="clean-lib, load-ivy" description="--> resolve and retrieve dependencies with ivy">
    	<ivy:configure />
        <ivy:resolve />
        <ivy:retrieve pattern="${dir.lib}${ivy.retrieve.pattern}" sync="true" type="jar,bundle" />
        <ivy:retrieve pattern="${dir.lib-src}${ivy.retrieve.pattern}" sync="true" type="source" />
    </target>

    <!-- =================================
          target: report
         ================================= -->
    <target name="report" depends="resolve" description="--> generates a report of dependencies">
        <mkdir dir="${dir.build}/ivy-report"/>
        <ivy:report todir="${dir.build}/ivy-report"/>
    </target>

    <!-- =================================
          target: clean-lib
         ================================= -->
    <target name="clean-lib" description="--> clean the project libraries directory (dependencies)">
        <mkdir dir="${dir.lib}"/>
        <mkdir dir="${dir.lib-src}"/>
        
        <delete includeemptydirs="true">
            <fileset dir="${dir.lib}" includes="**/*"/>
            <fileset dir="${dir.lib-src}" includes="**/*"/>
        </delete>
    </target>

    <!-- =================================
          target: clean-build
         ================================= -->
    <target name="clean-build" description="--> clean the project built files">
        <delete includeemptydirs="true" dir="${dir.build}"/>
    </target>

    <!-- =================================
          target: clean
         ================================= -->
    <target name="clean" depends="clean-build, clean-lib" description="--> clean the project" />

</project>