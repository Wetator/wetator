<?xml version="1.0" encoding="utf-8"?>
<project name="Wetator" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

    <!-- make environment variables of operation system available -->
    <property environment="env" />

    <!-- path to ant-dir -->
    <property name="ant" value="ant" />

    <condition property="is-ci">
        <equals arg1="${stage}" arg2="CI" />
    </condition>

    <!-- application specific properties -->
    <xmlproperty file="./build-properties.xml" keepRoot="false" semanticAttributes="true" />

    <import file="./build-patternset.xml" />


    <!--
    publish-sonatype-releases:  info -> resolve-dependencies -> compile -> compile-tests -> run-tests -> gather-metrics -> package-bundles -> publish-local -> publish-sonatype-releases
    publish-sonatype-snapshots: info -> resolve-dependencies -> compile -> compile-tests -> run-tests -> gather-metrics -> package-bundles -> publish-local -> publish-sonatype-snapshots
    publish-local:              info -> resolve-dependencies -> compile -> compile-tests -> run-tests -> gather-metrics -> package-bundles -> publish-local
    package:                    info -> resolve-dependencies -> compile -> compile-tests -> run-tests -> gather-metrics -> package-bundles
    package-no-tests:           info -> resolve-dependencies -> compile -> package-bundles
    package-only:               info -> compile -> package-bundles
    metrics:                    info -> resolve-dependencies -> compile -> compile-tests -> run-tests -> gather-metrics
    metrics-only:               info -> compile -> gather-metrics
    tests:                      info -> resolve-dependencies -> compile -> compile-tests -> run-tests
    tests-only:                 info -> compile -> compile-tests -> run-tests
    -->


    <!-- *******************************************
         target publish-sonatype-releasess
           executes the complete build cycle until
           publishing to the Sonatype release
           repository:
           info -> resolve-dependencies -> compile
           -> compile-tests -> run-tests
           -> gather-metrics -> package-bundles
           -> publish-local
           -> publish-sonatype-releases
         ******************************************* -->
    <target name="publish-sonatype-releases" description="executes the complete build cycle until publishing to the Sonatype snapshot repository"
        depends="info, resolve-dependencies, -run-tests, -gather-metrics, -check-tests, -package-bundles, -publish-local, -publish-sonatype-releases">
    </target>


    <!-- *******************************************
         target publish-sonatype-snapshots
           executes the complete build cycle until
           publishing to the Sonatype snapshot
           repository:
           info -> resolve-dependencies -> compile
           -> compile-tests -> run-tests
           -> gather-metrics -> package-bundles
           -> publish-local
           -> publish-sonatype-snapshots
         ******************************************* -->
    <target name="publish-sonatype-snapshots" description="executes the complete build cycle until publishing to the Sonatype snapshot repository"
        depends="info, resolve-dependencies, -run-tests, -gather-metrics, -check-tests, -package-bundles, -publish-local, -publish-sonatype-snapshots">
    </target>


    <!-- *******************************************
         target publish-local
           executes the complete build cycle until
           publishing to the local repository:
           info -> resolve-dependencies -> compile
           -> compile-tests -> run-tests
           -> gather-metrics -> package-bundles
           -> publish-local
         ******************************************* -->
    <target name="publish-local" description="executes the complete build cycle until publishing to the local repository"
        depends="info, resolve-dependencies, -run-tests, -gather-metrics, -check-tests, -package-bundles, -publish-local">
    </target>


    <!-- *******************************************
         target package
           executes the complete build cycle until
           packaging the bundles:
           info -> resolve-dependencies -> compile
           -> compile-tests -> run-tests
           -> gather-metrics -> package-bundles
         ******************************************* -->
    <target name="package" description="executes the complete build cycle until packaging the bundles"
        depends="info, resolve-dependencies, -run-tests, -gather-metrics, -check-tests, -package-bundles">
    </target>


    <!-- *******************************************
         target package-no-tests
           executes the build cycle until packaging
           the bundles without the tests:
           info -> resolve-dependencies -> compile
           -> package-bundles
         ******************************************* -->
    <target name="package-no-tests" description="executes the build cycle until packaging the bundles without the tests"
        depends="/notests, /nometrics, package">
    </target>


    <!-- *******************************************
         target package-only
           only packages the bundles
         ******************************************* -->
    <target name="package-only" description="only packages the bundles"
        depends="/noresolve, /notests, /nometrics, package">
    </target>


    <!-- *******************************************
         target metrics
           executes the complete build cycle until
           gathering the metrics:
           info -> resolve-dependencies -> compile
           -> compile-tests -> run-tests
           -> gather-metrics
         ******************************************* -->
    <target name="metrics" description="executes the complete build cycle until gathering the metrics"
        depends="info, resolve-dependencies, -run-tests, -gather-metrics, -check-tests">
    </target>


    <!-- *******************************************
         target metrics-only
           only gathers the metrics:
           info -> compile -> gather-metrics
         ******************************************* -->
    <target name="metrics-only" description="only gathers the metrics"
        depends="/noresolve, /notests, metrics">
    </target>


    <!-- *******************************************
         target tests
           executes the complete build cycle until
           running the tests:
           info -> resolve-dependencies -> compile
           -> compile-tests -> run-tests
         ******************************************* -->
    <target name="tests" description="executes the complete build cycle until running the tests"
        depends="info, resolve-dependencies, -run-tests, -check-tests">
    </target>


    <!-- *******************************************
         target tests-only
           runs the tests only:
           info -> compile
           -> compile-tests -> run-tests
         ******************************************* -->
    <target name="tests-only" description="runs the tests only"
        depends="/noresolve, tests">
    </target>


    <!-- *******************************************
         target /noresolve
           use to skip resolving dependencies
         ******************************************* -->
    <target name="/noresolve" description="use to skip resolving dependencies">
        <property name="skip.resolve" value="true" />
    </target>


    <!-- *******************************************
         target /notests
           use to skip running tests
         ******************************************* -->
    <target name="/notests" description="use to skip running tests">
        <property name="skip.tests" value="true" />
    </target>


    <!-- *******************************************
         target /nometrics
           use to skip gathering metrics
         ******************************************* -->
    <target name="/nometrics" description="use to skip gathering metrics">
        <property name="skip.metrics" value="true" />
    </target>


    <!-- *******************************************
         target info
           displays some info about the build
         ******************************************* -->
    <target name="info" description="displays some info about the build">
        <echo level="info"></echo>
        <echo level="info">Project: ${ant.project.name}</echo>
        <echo level="info">  ${ant.version}</echo>
        <echo level="info">  Java version ${ant.java.version}</echo>
        <echo level="info"></echo>
    </target>


    <!-- ===========================================
         private target clean-lib
           cleans the project libraries directory
           (dependencies)
         =========================================== -->
    <target name="-clean-lib" unless="skip.resolve">
        <mkdir dir="${dir.lib}"/>
        <mkdir dir="${dir.lib-src}"/>

        <delete includeemptydirs="true">
            <fileset dir="${dir.lib}" includes="**/*"/>
            <fileset dir="${dir.lib-src}" includes="**/*"/>
        </delete>
    </target>


    <!-- ===========================================
         private target load-ivy
         =========================================== -->
    <target name="-load-ivy">
        <!-- try to load ivy here from home ivy dir, in case the user has not already dropped
              it into ant's lib dir (note that the latter copy will always take precedence).
              We will not fail as long as ivy home lib dir exists (it may be empty) and
              ivy is in at least one of ant's lib dir or the ivy home lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="./ant_lib" includes="ivy*.jar"/>
            <fileset dir="./ant_lib" includes="bcp*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:configure override="true" />
    </target>


    <!-- *******************************************
         target resolve-dependencies
           resolves and retrieves dependencies
           with ivy
         ******************************************* -->
    <target name="resolve-dependencies" description="resolves and retrieves dependencies with ivy"
        depends="info, -clean-lib, -load-ivy" unless="skip.resolve">
        <echo level="info">Resolving dependencies</echo>
        <!-- first resolve the sources to have the jars resolved afterwards still in memory for further use -->
        <ivy:resolve conf="sources" />
        <ivy:retrieve pattern="${dir.lib-src}${ivy.retrieve.pattern}" sync="true" type="source" />
        <ivy:resolve conf="default, master, compile, provided, runtime, test, optional" />
        <ivy:retrieve pattern="${dir.lib}${ivy.retrieve.pattern}" sync="true" type="jar,bundle,orbit" />
    </target>


    <!-- ===========================================
         private target clean-build
           cleans the built project files
         =========================================== -->
    <target name="-clean-build">
        <delete includeemptydirs="true" dir="${dir.build}"/>
    </target>


    <!-- ===========================================
         private target compile
           compiles the sources (not test sources)
         =========================================== -->
    <target name="-compile" depends="-clean-build">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build}/classes"/>

        <!-- compile classes -->
        <echo level="info">Compiling sources with Java target ${javac.target}</echo>

        <javac srcdir="${dir.src}" encoding="utf-8" debug="on" debuglevel="lines,vars,source"
            source="${javac.source}" target="${javac.target}"
            destdir="${dir.build}/classes" includeantruntime="false">
            <classpath>
                <fileset dir="${dir.lib}">
                    <patternset refid="libPattern" />
                </fileset>
            </classpath>
        </javac>

        <!-- copy resources -->
        <copy todir="${dir.build}/classes" preservelastmodified="yes">
            <fileset dir="${dir.src}">
                <patternset refid="resourcePattern" />
            </fileset>
        </copy>
    </target>


    <!-- ===========================================
         private target compile-tests
           compiles the test sources
         =========================================== -->
    <target name="-compile-tests" depends="-clean-build" unless="skip.tests">
        <mkdir dir="${dir.build}"/>
        <mkdir dir="${dir.build}/test-classes"/>

        <!-- compile classes -->
        <echo level="info">Compiling test sources with Java target ${javac.target}</echo>

        <javac srcdir="${dir.test-src}" encoding="utf-8" debug="on" debuglevel="lines,vars,source"
            source="${javac.source}" target="${javac.target}"
            destdir="${dir.build}/test-classes" includeantruntime="false">
            <classpath>
                <fileset dir="${dir.lib}">
                    <patternset refid="libPattern" />
                </fileset>
                <path path="${dir.build}/classes" />
            </classpath>
        </javac>

        <!-- copy resources -->
        <copy todir="${dir.build}/test-classes" preservelastmodified="yes">
            <fileset dir="${dir.test-src}">
                <patternset refid="resourcePattern" />
            </fileset>
        </copy>
    </target>


    <!-- ===========================================
         private target start-xvfb
           starts the virtual display
         =========================================== -->
    <target name="-start-xvfb" if="is-ci">
        <exec dir="/usr/bin" executable="Xvfb" failonerror="false" spawn="true">
            <arg line=":${display} -ac -screen 0 1024x768x16" />
        </exec>
        <echo level="info">Started Xvfb display ${display}</echo>
    </target>


    <!-- ===========================================
         private target run-tests
           runs all tests
         =========================================== -->
    <target name="-run-tests" description="runs all tests"
        depends="-compile, -compile-tests, -start-xvfb" unless="skip.tests">
        <delete dir="${dir.deploy}/junit" includeEmptyDirs="true"/>
        <mkdir dir="${dir.deploy}/junit"/>

        <echo level="info">Running tests (output: ${dir.deploy}/junit)</echo>
        <path id="classpath-junit">
            <pathelement location="${dir.build}/classes" />
            <pathelement location="${dir.build}/test-classes" />

            <fileset dir="${dir.lib}">
                <patternset refid="libPattern" />
            </fileset>
        </path>

        <!-- run tests to create xml report -->
        <junit printsummary="withOutAndErr"
            haltonfailure="no" failureproperty="unittestsfailed"
            fork="yes" forkmode="once" dir="${basedir}">
            <classpath refid="classpath-junit" />
            <jvmarg value="-Duser.language=en" />
            <env key="DISPLAY" value=":${display}" />

            <batchtest todir="${dir.deploy}/junit">
                <formatter type="xml" />
                <fileset dir="${dir.build}/test-classes">
                    <patternset refid="junitPattern" />
                </fileset>
            </batchtest>
        </junit>
    </target>


    <!-- ===========================================
         private target load-checkstyle
         =========================================== -->
    <target name="-load-checkstyle" depends="-load-ivy" unless="skip.metrics">
        <ivy:cachepath organisation="com.puppycrawl.tools" module="checkstyle" revision="8.0" type="jar,bundle"
            pathid="taskdef-classpath-checkstyle" inline="true" transitive="true" log="download-only" />
        <taskdef resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties" classpathref="taskdef-classpath-checkstyle" />
    </target>


    <!-- ===========================================
         private target load-findbugs
         =========================================== -->
    <target name="-load-findbugs" depends="-load-ivy" unless="skip.metrics">
        <echo level="info">Resolving sources and javadoc makes problems for findbugs so ignore such failures</echo>
        <ivy:cachepath organisation="com.google.code.findbugs" module="findbugs" revision="3.0.1" type="jar,bundle"
            pathid="taskdef-classpath-findbugs" inline="true" transitive="true" log="download-only" haltonfailure="false" />
        <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="taskdef-classpath-findbugs" />
    </target>


    <!-- ===========================================
         private target load-pmd
         =========================================== -->
    <target name="-load-pmd" depends="-load-ivy" unless="skip.metrics">
        <ivy:cachepath organisation="net.sourceforge.pmd" module="pmd-java" revision="5.8.1" type="jar,bundle"
            pathid="taskdef-classpath-pmd" inline="true" transitive="true" log="download-only" />
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="taskdef-classpath-pmd" />
        <taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="taskdef-classpath-pmd" />
    </target>


    <!-- ===========================================
         private target load-forbiddenapis
         =========================================== -->
    <target name="-load-forbiddenapis" depends="-load-ivy" unless="skip.metrics">
        <ivy:cachepath organisation="de.thetaphi" module="forbiddenapis" revision="2.3" type="maven-plugin"
            pathid="taskdef-classpath-forbiddenapis" inline="true" transitive="true" log="download-only" />
        <taskdef name="forbiddenapis" classname="de.thetaphi.forbiddenapis.ant.AntTask" classpathref="taskdef-classpath-forbiddenapis" />
    </target>


    <!-- ===========================================
         private target gather-metrics
           gathers all metrics
         =========================================== -->
    <target name="-gather-metrics" description="gathers all metrics"
        depends="-compile, -load-checkstyle, -load-findbugs, -load-pmd, -load-forbiddenapis" unless="skip.metrics">
        <!-- run checkstyle -->
        <echo level="info">Running Checkstyle (output: ${dir.deploy}/checkstyle)</echo>
        <delete dir="${dir.deploy}/checkstyle" includeemptydirs="true" />
        <mkdir dir="${dir.deploy}/checkstyle" />
        <checkstyle config="${dir.test}/checkstyle/checkstyle.xml" failOnViolation="false">
            <formatter type="xml" tofile="${dir.deploy}/checkstyle/checkstyle-report.xml"/>
            <fileset dir="${dir.src}">
                <patternset refid="checkstylePattern" />
            </fileset>
            <classpath>
                <fileset dir="${dir.lib}">
                    <patternset refid="libPattern" />
                </fileset>
                <path path="${dir.build}/classes" />
            </classpath>
        </checkstyle>

        <!-- run findbugs -->
        <echo level="info">Running Findbugs (output: ${dir.deploy}/findbugs)</echo>
        <path id="findbugs-aux-classpath">
            <fileset dir="${dir.lib}">
                <patternset refid="libPattern" />
            </fileset>
        </path>

        <delete dir="${dir.deploy}/findbugs" includeemptydirs="true" />
        <mkdir dir="${dir.deploy}/findbugs" />
        <findbugs jvmargs="-Xmx512m" output="xml:withMessages"
            outputFile="${dir.deploy}/findbugs/findbugs-report.xml" timeout="1800000"
            excludeFilter="${dir.test}/findbugs/exclude-filter.xml">
            <classpath refid="taskdef-classpath-findbugs" />
            <auxclasspath refid="findbugs-aux-classpath" />
            <sourcePath path="${dir.src}" />
            <class location="${dir.build}/classes" />
        </findbugs>

        <!-- run pmd -->
        <echo level="info">Running PMD (output: ${dir.deploy}/pmd)</echo>
        <mkdir dir="${dir.deploy}/pmd" />
        <pmd shortFilenames="true">
            <ruleset>rulesets/java/basic.xml,rulesets/java/empty.xml,rulesets/java/unnecessary.xml,rulesets/java/braces.xml,rulesets/java/unusedcode.xml,rulesets/java/finalizers.xml,${dir.test}/pmd/wet-clone.xml,${dir.test}/pmd/wet-strings.xml,${dir.test}/pmd/wet-optimizations.xml,${dir.test}/pmd/wet-logging-jakarta-commons.xml</ruleset>
            <formatter type="xml" toFile="${dir.deploy}/pmd/pmd-report.xml" />
            <fileset dir="${dir.src}">
                <patternset refid="pmdPattern" />
            </fileset>
        </pmd>
        <cpd minimumTokenCount="100" outputFile="${dir.deploy}/pmd/cpd-report.xml" format="xml">
            <fileset dir="${dir.src}">
                <patternset refid="pmdPattern" />
            </fileset>
        </cpd>

        <!-- run forbiddenapis -->
        <forbiddenapis dir="${dir.build}/classes" targetVersion="${javac.target}">
            <classpath>
                <fileset dir="${dir.lib}">
                    <patternset refid="libPattern" />
                </fileset>
            </classpath>

            <bundledsignatures name="jdk-unsafe"/>
            <bundledsignatures name="jdk-deprecated"/>
            <bundledsignatures name="jdk-non-portable"/>
            <bundledsignatures name="commons-io-unsafe-2.5"/>
            <!--signaturesFileset file="path/to/signatures.txt"/-->
        </forbiddenapis>
    </target>


    <!-- ===========================================
         private target check-tests
         =========================================== -->
    <target name="-check-tests" if="unittestsfailed">
        <fail message="Unit tests failing; build failed." />
    </target>


    <!-- ===========================================
         private target get-buildnumber-local
         =========================================== -->
    <target name="-get-buildnumber-local" unless="is-ci">
        <propertyfile file="build.properties">
            <entry key="application.buildnumber" type="int" default="42" operation="+"/>
        </propertyfile>
        <property file="build.properties"/>
    </target>


    <!-- ===========================================
         private target get-buildnumber-ci
         =========================================== -->
    <target name="-get-buildnumber-ci" if="is-ci">
        <property name="application.buildnumber" value="jenkins-${env.BUILD_NUMBER}"></property>
    </target>


    <!-- ===========================================
         private target get-buildnumber
         =========================================== -->
    <target name="-get-buildnumber" depends="-get-buildnumber-local, -get-buildnumber-ci">
    </target>


    <!-- ===========================================
         private target package-bundles
           builds all release artifacts
         =========================================== -->
    <target name="-package-bundles" description="builds all release artifacts"
        depends="-compile, -get-buildnumber, -load-ivy">
        <tstamp>
            <format property="timestamp" pattern="yyyy-MM-dd HH-mm-ss z" timezone="Europe/Berlin" locale="en"/>
        </tstamp>

        <echo level="info">Packaging bundles (output: ${dir.deploy})</echo>

        <echo level="info">  Version: ${application.version}</echo>
        <echo level="info">  Build:   ${application.buildnumber}</echo>

        <mkdir dir="${dir.deploy}"/>

        <pathconvert property="class-path" pathsep=" ">
            <fileset dir="${dir.lib}">
                <patternset refid="runtime-libs" />
            </fileset>
            <mapper type="flatten" />
        </pathconvert>

        <!-- generate jar -->
        <delete file="${dir.build}/${application.jar-basename}.jar"/>
        <jar destfile="${dir.build}/${application.jar-basename}.jar">
            <fileset dir="${dir.build}/classes">
                <include name="**/*.*"/>
                <exclude name="wetator.config"/>
            </fileset>
            <manifest>
                <attribute name="Main-Class" value="org.wetator.Wetator"/>
                <attribute name="Class-Path" value="${class-path}"/>
                <section name="Application">
                    <attribute name="Application-Name" value="${application.name}"/>
                    <attribute name="Vendor" value="${application.vendor}"/>
                    <attribute name="Version" value="${application.version}"/>
                    <attribute name="Build" value="${application.buildnumber}"/>
                    <attribute name="Date" value="${timestamp}"/>
                </section>
                <section name="Build">
                    <attribute name="Java-Runtime" value="${java.runtime.name}" />
                    <attribute name="Java-Version" value="${java.runtime.version}" />
                    <attribute name="Java-Target" value="${javac.target}" />
                    <attribute name="OS-Name" value="${os.name}"/>
                    <attribute name="OS-Version" value="${os.version}"/>
                </section>
            </manifest>
        </jar>

        <!-- generate javadoc -->
        <delete file="${dir.build}/${application.jar-basename}-javadoc.jar"/>
        <javadoc destdir="${dir.build}/jdoc">
            <fileset dir="${dir.src}" >
            </fileset>
            <classpath>
                <fileset dir="${dir.lib}">
                    <patternset refid="libPattern" />
                </fileset>
            </classpath>
        </javadoc>
        <zip destfile="${dir.build}/${application.jar-basename}-javadoc.jar">
            <fileset dir="${dir.build}/jdoc" >
            </fileset>
        </zip>

        <!-- generate sources jar -->
        <zip destfile="${dir.build}/${application.jar-basename}-sources.jar">
            <fileset dir="." >
                <include name=".checkstyle" />
                <include name=".classpath" />
                <include name=".project" />
                <include name="build.xml" />
                <include name="build-properties.xml" />
                <include name="build-patternset.xml" />
                <include name="build.properties" />
                <include name="ivy.xml" />
                <include name="ivysettings.xml" />
                <include name="LICENSE.txt" />
                <include name="pom.template.xml" />
                <include name="readme.txt" />
            </fileset>

            <zipfileset dir="${dir.ant-lib}" prefix="${dir.ant-lib}">
            </zipfileset>

            <zipfileset dir="${dir.lib}" prefix="${dir.lib}">
                <exclude name="**/**" />
            </zipfileset>

            <zipfileset dir="${dir.samples}" prefix="${dir.samples}">
                <exclude name="**/**" />
            </zipfileset>

            <zipfileset dir="${dir.templates}" prefix="${dir.templates}">
                <exclude name="**/**" />
            </zipfileset>

            <zipfileset dir="${dir.src}" prefix="${dir.src}">
                <exclude name="**/jdoc/**" />
                <exclude name="**/*.jpage*" />
            </zipfileset>

            <zipfileset dir="${dir.test}" prefix="${dir.test}">
                <exclude name="**/jdoc/**" />
                <exclude name="**/*.jpage*" />
            </zipfileset>

            <zipfileset dir="${dir.xsl}" prefix="${dir.xsl}">
                <include name="**/**.js" />
                <include name="**/**.png" />
                <include name="**/**.xsl" />
            </zipfileset>
        </zip>
        <copy file="${dir.build}/${application.jar-basename}-sources.jar" tofile="${dir.deploy}/${application.jar-basename}-${application.version}-sources.jar"/>

        <!-- generate pom -->
        <ivy:makepom ivyfile="ivy.xml" pomfile="${dir.build}/${application.jar-basename}.pom" templatefile="pom.template.xml"
            artifactpackaging="jar">
            <mapping conf="default" scope="compile" />
            <mapping conf="compile" scope="compile" />
            <mapping conf="provided" scope="provided" />
            <mapping conf="runtime" scope="runtime" />
            <mapping conf="test" scope="test" />
        </ivy:makepom>

        <!-- generate cmd-line distribution zip -->
        <echo file="${dir.build}/wetator.bat" append="false">@echo off

REM ---------------------------------------------------------
REM Simple Wetator start script
REM
REM  requires JAVA 1.6 or higher installed
REM ---------------------------------------------------------

SETLOCAL

REM ---------------------------------------------------------
REM overwrite your system JAVA_HOME if you like
REM ---------------------------------------------------------
REM SET JAVA_HOME=

REM ---------------------------------------------------------
REM additional java opts
REM ---------------------------------------------------------
rem SET WETATOR_JAVA_OPT=%WETATOR_JAVA_OPT% "-Xmx512m"


REM ---------------------------------------------------------
REM additional jar files to be added to the classpath
REM
REM you can simply add jar files by puting them into the
REM lib folder
REM if you like to reference other jar files you have to add
REM them here (separated by ;)
REM ---------------------------------------------------------
rem SET WETATOR_ADDITIONAL_LIBS=c:\orcale\jdbc\ojdbc6.jar


set WETATOR_HOME=.
set WETATOR_LIB=%WETATOR_HOME%\lib
set WETATOR_MAIN_CLASS=org.wetator.Wetator
set JAVA_EXE=java.exe

IF "%JAVA_HOME%" == "" GOTO MSG_NOJAVAHOME
IF NOT EXIST %JAVA_HOME%\bin\%JAVA_EXE% GOTO MSG_NOJAVA 2>nul

rem start command for Wetator
set CMD="%JAVA_HOME%\bin\%JAVA_EXE%" %WETATOR_JAVA_OPT% -cp ".;%WETATOR_LIB%\*;%WETATOR_ADDITIONAL_LIBS%" %WETATOR_MAIN_CLASS% %*

echo Starting Wetator

ECHO %CMD%
%CMD%


goto end

:MSG_NOJAVAHOME

ECHO ***********************************************************************
ECHO *                                                                     *
ECHO * ERROR: JAVA_HOME not found in your environment.                     *
ECHO *                                                                     *
ECHO * Please, set the JAVA_HOME variable in your environment to match the *
ECHO * location of the Java Virtual Machine you want to use.               *
ECHO *                                                                     *
ECHO ***********************************************************************
ECHO
PAUSE
GOTO END

:MSG_NOJAVA
ECHO ***********************************************************************
ECHO *                                                                     *
ECHO * Your JAVA_HOME/JAVA_EXE are invalid                                 *
ECHO * File not found:                                                     *
ECHO *   '%JAVA_HOME%\bin\%JAVA_EXE%'
ECHO *                                                                     *
ECHO ***********************************************************************
ECHO
PAUSE

:END
ENDLOCAL
</echo>

        <fixcrlf srcdir="${dir.build}" eol="crlf" >
            <include name="wetator.bat" />
        </fixcrlf>

        <zip destfile="${dir.deploy}/${application.jar-basename}_${application.version}.zip">
            <fileset dir="${dir.build}" >
                <include name="wetator.bat" />
            </fileset>

            <zipfileset dir="${dir.build}" prefix="lib" >
                <include name="${application.jar-basename}.jar"/>
            </zipfileset>

            <zipfileset dir="${dir.lib}" prefix="lib">
                <patternset refid="runtime-libs" />
            </zipfileset>

            <zipfileset dir="${dir.samples}" prefix="samples">
                <exclude name="google_search/logs/**" />
                <exclude name="wetator_testform/logs/**" />
            </zipfileset>

            <zipfileset dir="${dir.xsl}" prefix="xsl">
            </zipfileset>

            <zipfileset dir="${dir.templates}" prefix="templates">
                <include name="empty.xls" />
                <include name="empty.wet" />
            </zipfileset>

        	<zipfileset dir="${dir.src}" prefix="templates">
                <include name="wetator.config" />
                <include name="js_filter.cfg" />
            </zipfileset>
        </zip>
    </target>


    <!-- ===========================================
         private target publish-local
           publishes the release artifacts to the
           local Maven repository
         =========================================== -->
    <target name="-publish-local" depends="-package-bundles, -load-ivy" description="publishes the Wetator release artifacts to the local Maven repository">
        <ivy:publish resolver="local-m2-publish" forcedeliver="true" overwrite="true" publishivy="false"
            pubrevision="${application.pubversion}">
            <artifacts pattern="${dir.build}/[artifact](-[classifier]).[ext]"/>
        </ivy:publish>
    </target>


    <!-- ===========================================
         private target publish-sonatype-releases
           publishes the release artifacts to the
           Sonatype release repository
         =========================================== -->
    <target name="-publish-sonatype-releases" depends="-package-bundles, -load-ivy" description="publishes the Wetator release artifacts to the Sonatype release repository">
        <ivy:publish resolver="SonatypeReleases-publish" forcedeliver="true" overwrite="true" publishivy="false"
            pubrevision="${application.pubversion}">
            <artifacts pattern="${dir.build}/[artifact](-[classifier]).[ext]"/>
        </ivy:publish>
    </target>


    <!-- ===========================================
         private target publish-sonatype-snapshots
           publishes the release artifacts to the
           Sonatype snapshots repository
         =========================================== -->
    <target name="-publish-sonatype-snapshots" depends="-package-bundles, -load-ivy" description="publishes the Wetator release artifacts to the Sonatype snapshots repository">
        <ivy:publish resolver="SonatypeSnapshots-publish" forcedeliver="true" overwrite="true" publishivy="false"
            pubrevision="${application.pubversion}">
            <artifacts pattern="${dir.build}/[artifact](-[classifier]).[ext]"/>
        </ivy:publish>
    </target>


    <!-- *******************************************
         target test-release
           tests the release artifacts
         ******************************************* -->
    <target name="test-release" description="test the wetator release artefacts" >
        <echo level="info">Testing version: ${application.version}</echo>
        <echo></echo>

        <!-- new dir for the tests -->
        <delete dir="${dir.build}/test-release" />
        <mkdir dir="${dir.build}/test-release" />

        <!-- test the application -->
        <unzip src="${dir.deploy}/${application.jar-basename}_${application.version}.zip" dest="${dir.build}/test-release/app" />
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/wetator_testform/wetator.config"
            todir="${basedir}/${dir.build}/test-release/app"
        />
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/wetator_testform/wetator_testform.wet"
            todir="${basedir}/${dir.build}/test-release/app"
        />
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/wetator_testform/wetator_testform.wett"
            todir="${basedir}/${dir.build}/test-release/app"
        />
        <copy
            file="${basedir}/${dir.build}/test-release/app/samples/wetator_testform/wetator_testform.xls"
            todir="${basedir}/${dir.build}/test-release/app"
        />

        <copy
            file="${basedir}/${dir.test}/xml/open_url_https.wet"
            todir="${basedir}/${dir.build}/test-release/app"
        />

        <exec executable="cmd" dir="${basedir}/${dir.build}/test-release/app">
            <arg value="/c"/>
            <arg value="${basedir}/${dir.build}/test-release/app/wetator.bat"/>

            <arg value="wetator_testform.wet"/>
            <arg value="wetator_testform.wett"/>
            <arg value="wetator_testform.xls"/>

            <arg value="open_url_https.wet"/>

        </exec>
    </target>


    <!-- *******************************************
         target report-dependencies
           generates a report of the dependencies
         ******************************************* -->
    <target name="report-dependencies" description="generates a report of the dependencies"
        depends="info, resolve-dependencies, -load-ivy" unless="skip.resolve">
        <echo level="info">Creating dependency report (output: ${dir.deploy}/ivy-report)</echo>
        <delete dir="${dir.deploy}/ivy-report" />
        <mkdir dir="${dir.deploy}/ivy-report" />
        <ivy:report todir="${dir.deploy}/ivy-report" />
    </target>


    <!-- *******************************************
         target zip-curret-libs
           bundles the current libs as zip
         ******************************************* -->
    <target name="zip-current-libs" description="bundles the current libs as zip"
        depends="info">
        <zip destfile="${dir.deploy}/current-libs.zip">
            <zipfileset dir="${dir.lib}" prefix="lib" />
            <zipfileset dir="${dir.lib-src}" prefix="lib_src" />
        </zip>
    </target>


    <!-- *******************************************
         target clean
           cleans the project
         ******************************************* -->
    <target name="clean" depends="info, -clean-build, -clean-lib" description="cleans the project" />


    <!-- *******************************************
         target clean-cache
           cleans the ivy cache
         ******************************************* -->
    <target name="clean-cache" depends="-load-ivy" description="cleans the ivy cache">
        <ivy:cleancache />
    </target>

</project>
